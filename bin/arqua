#!/opt/local/bin/perl -W -t
use strict;
use List::Util qw[min max];
use Getopt::Long;

my $packageDrawer = \&drawEmpty;
my $dependencyDrawer = \&drawEmpty;
my $functionDrawer = \&drawEmpty;
my $fileDrawer = \&drawEmpty;

sub initPackage {
	my ($name, $location, $parent) = @_;
	return {
		parent => $parent,
		type => "package",
		name => $name,
		location => $location,
		path => $location . "/" . $name,
		tangle => 0,
		complexity => 0,
		edges => 0,
		deps => {},
		functions => {},
		size => 0,
		nodes => {},
		depfuncs => {},
		circ => {},
		totSize => 0,
		totSmells => 0,
		tangleSmells => 0,
		complexitySmells => 0,
		level => 1,
		draw => sub {
			return $packageDrawer->(@_);
		},
		drawDependencies => sub {
			return $dependencyDrawer->(@_);
		},
	};
}

sub initFile {
	my ($name, $location, $parent) = @_;
	return {
		parent => $parent,
		type => "file",
		name => $name,
		location => $location,
		path => $location . "/" . $name,
		tangle => 0,
		complexity => 0,
		edges => 0,

		functions => {},
		size => 0,
		nodes => {},
		depfuncs => {},
		circ => {},
		totSize => 0,
		totSmells => 0,
		tangleSmells => 0,
		complexitySmells => 0,
		draw =>  sub {
			return $fileDrawer->(@_);
		},
		drawDependencies => sub {
			return $dependencyDrawer->(@_);
		}
	};
}

sub initFunction {
	my ($name, $location) = @_;
	return {
		type => "function",
		name => $name,
		functions => {$name => 1},
		location => $location,
		path => $location . "/" . $name,
		complexity => 0,
		size => 0,
		totSize => 0,
		totSmells => 0,
		deps => {},
		circ => {},
		depfuncs => {},
		tangleSmells => 0,
		complexitySmells => 0,
		draw =>  sub {
			return $functionDrawer->(@_);
		},
		drawDependencies => \&drawFunctionDependencies
	};
}

sub initSmell {
	my ($name, $type, $value) = @_;
	return {
		"name" => $name,
		"type" => $type,
		"value" => $value
	};
}

sub calculateQuality {
	my ($size, $smells) = @_;
	return $size > 0 ? 100-$smells/$size*100 : 100;
}

sub calculateComplexity {
	my ($value, $tolerance) = @_;
	return $value > 0 ? max(0, ($value - $tolerance)/$value) : 0;
}

sub calculateTangle {
	my ($tangles, $edges) = @_;
	return $edges > 0 ? $tangles/$edges*2 : 0;
}

sub increaseComplexity {
	my ($node) = @_;
	$node->{complexity} += 1;
}

sub increaseSize {
	my ($node) = @_;
	$node->{size} += 1;
	$node->{totSize} += 1;
}

sub increaseDependencies {
	my ($node, $callee) = @_;
	unless (exists($node->{depfuncs}->{$callee})) {
		$node->{depfuncs}->{$callee} = 0;
	}
	$node->{depfuncs}->{$callee} += 1;
}

sub parseFunction {
	my ($parent, $line, $currentFunction) = @_;
	my $nodes = $parent->{nodes};

	if ($line =~ /^;; Function (.*)\s+\((\S+)(,.*)?\)\s*$/) {
		my $name = $2;
		unless (exists($nodes->{$name})) {
			$nodes->{$name} = initFunction($name,
				$parent->{path});
		}
		return $name;
	} elsif ($currentFunction ne "" and
		exists($nodes->{$currentFunction})) {
		my $node = $nodes->{$currentFunction};

		if ($line =~ /^.*\((call|symbol_ref).*"(.*)".*$/) {
			increaseDependencies($node, $2);
		}

		if ($line =~ /^.*\(if_then_else.*$/) {
			increaseComplexity($node);
		}

		if ($line =~ /^.*\(insn.*/) {
			increaseSize($node);
		}
	}
	return $currentFunction;
}

sub parseNode {
	my ($node, $path, $line, $currentFunction) = @_;
	my ($subNodeName, $remainingPath) = split(/\//, $path, 2);

	unless (exists($node->{nodes}->{$subNodeName})) {
		$node->{nodes}->{$subNodeName} = $remainingPath ?
			initPackage($subNodeName, $node->{path}, $node) :
			initFile($subNodeName, $node->{path}, $node);
	}
	return parse(
		$node->{nodes}->{$subNodeName},
		$remainingPath, $line, $currentFunction);
}

sub parse {
	my ($node, $path, $line, $currentFunction) = @_;
	return $path ?
		parseNode($node, $path, $line, $currentFunction) :
		parseFunction($node, $line, $currentFunction);
}

sub calculateNodeChildCall {
	my ($node, $parent, $calleeFunc, $calleeFuncNbr) = @_;
	my $calleeFound = 0;
	while (my ($calleeName, $callee) = each(%{$parent->{nodes}})) {
		if (exists($callee->{functions}->{$calleeFunc})) {
			unless (exists($node->{deps}->{$calleeName})) {
				$node->{deps}->{$calleeName} = 0;
				$parent->{complexity} += 1;
			}
			$node->{deps}->{$calleeName} += $calleeFuncNbr;
			$parent->{edges} += $calleeFuncNbr;
			$calleeFound = 1;
		}
	}
	unless ($calleeFound) {
		unless (exists($parent->{depfuncs}->{$calleeFunc})) {
			$parent->{depfuncs}->{$calleeFunc} = 0;
		}
		$parent->{depfuncs}->{$calleeFunc} += $calleeFuncNbr;
	}
}

sub calculateNodeChildCalls {
	my ($node, $parent) = @_;
	while (my ($calleeFunc, $calleeFuncNbr) = each(%{$node->{depfuncs}})) {
		calculateNodeChildCall($node,
			$parent, $calleeFunc, $calleeFuncNbr);
	}
}

sub calculateNodeCalls {
	my ($node) = @_;
	foreach my $child (values %{$node->{nodes}}) {
		calculateNodeChildCalls($child, $node);
	}
}

sub calculateNodeTangle {
	my ($node, $caller, $callerNbr, $callerName, $calleeName) = @_;
	my $callee = $node->{nodes}->{$calleeName};
	if (exists($caller->{deps}->{$calleeName}) and
		exists($callee->{deps}->{$callerName})) {
		my $calleeNbr = $callee->{deps}->{$callerName};
		if ($callerNbr >= $calleeNbr) {
			$callee->{circ}->{$callerName} = 1;
		}
		if ($callerNbr <= $calleeNbr) {
			$caller->{circ}->{$calleeName} = 1;
		}
		$node->{tangle} += min($callerNbr, $calleeNbr);
	}
}

sub calculateNodeTangles {
	my ($node) = @_;
	$node->{tangle} = 0;
	while (my ($callerName, $caller) = each(%{$node->{nodes}})) {
		while (my ($calleeName, $callerNbr) =
			each(%{$caller->{deps}})) {
			calculateNodeTangle($node,
				$caller, $callerNbr, $callerName, $calleeName);
		}
	}
	$node->{tangle} = $node->{tangle}/2;
	$node->{calculatedTangle} =
		calculateTangle($node->{tangle}, $node->{edges});
	$node->{tangleSmells} = $node->{size}*$node->{calculatedTangle};
	$node->{totSmells} += $node->{tangleSmells};
}

sub calculateNodeComplexity {
	my ($node, $tolerance) = @_;
	$node->{calculatedComplexity} =
		calculateComplexity($node->{complexity}, $tolerance);
	$node->{complexitySmells} = $node->{size}*$node->{calculatedComplexity};
	$node->{totSmells} += $node->{complexitySmells};

}

sub calculateNodeChild {
	my ($node, $parent, $functionTolerance, $tolerance) = @_;
	$node->{level} = $parent->{level} + 1;
	calculate($node, $functionTolerance, $tolerance);
	foreach my $function (keys %{$node->{functions}}) {
		$parent->{functions}->{$function} = 1;
	}
	$parent->{size} += $node->{size};
	$parent->{totSmells} += $node->{totSmells};
}

sub calculateNodeChildren {
	my ($node, $functionTolerance, $tolerance) = @_;
	foreach my $child (values %{$node->{nodes}}) {
		calculateNodeChild($child,
			$node, $functionTolerance, $tolerance);
	}
}

sub calculateNode {
	my ($node, $functionTolerance, $tolerance) = @_;
	calculateNodeChildren($node, $functionTolerance, $tolerance);
	$node->{totSize} = $node->{size}*4;
	calculateNodeCalls($node);
	calculateNodeTangles($node);
	calculateNodeComplexity($node, $tolerance);
}

sub calculateFunction {
	my ($function, $tolerance) = @_;
	$function->{calculatedComplexity} =
		calculateComplexity($function->{complexity}, $tolerance);
	$function->{complexitySmells} =
		$function->{size}*$function->{calculatedComplexity};
	$function->{totSmells} = $function->{complexitySmells};
}

sub calculate {
	my ($node, $functionTolerance, $nodeTolerance) = @_;
	my $calculator = exists($node->{nodes}) ?
		\&calculateNode : \&calculateFunction;
	$calculator->($node, $functionTolerance, $nodeTolerance);
}

sub drawComplexitySmells {
	my ($node) = @_;
	return "CS=" . sprintf("%.0f", $node->{complexitySmells});
}

sub drawComplexityPercentage {
	my ($node) = @_;
	return "C=" . sprintf("%.0f", $node->{calculatedComplexity}*100) . "%";
}

sub drawTangleSmells {
	my ($node) = @_;
	return "TS=" . sprintf("%.0f", $node->{tangleSmells});
}

sub drawTanglePercentage {
	my ($node) = @_;
	return "T=" . sprintf("%.0f", $node->{calculatedTangle}*100) . "%";
}

sub drawComplexityLabel {
	my ($node) = @_;
	return (($node->{complexitySmells} > 0) ?
		(drawComplexityPercentage($node) .
		", ".
		drawComplexitySmells($node)) : "");
}

sub drawTangleLabel {
	my ($node) = @_;
	return ($node->{tangleSmells} > 0) ?
		drawTanglePercentage($node) .
		", ".
		drawTangleSmells($node) : "";
}

sub drawReportLabel {
	my ($node, $glue) = @_;
	$glue = (($node->{tangleSmells} > 0) and
		($node->{complexitySmells} > 0)) ?
		$glue : "";
	return drawComplexityLabel($node) .
		$glue .
		drawTangleLabel($node);
}

sub drawNameLabel {
	my ($node) = @_;
	return $node->{name};
}

sub drawReportColor {
	my ($node) = @_;
	return ($node->{tangleSmells} > 0 or $node->{complexitySmells} > 0) ?
		"fontcolor=crimson" :
		"fontcolor=black";
}

sub drawDependencyColor {
	my ($node, $callee) = @_;
	return exists($node->{circ}->{$callee}) ?
		", color=crimson, fontcolor=crimson, style=bold" : "";
}

sub drawDependency {
	my ($node, $propertyDrawer, $callee, $levels, $root) = @_;
	return "\"" . $node->{path} ."\"" . "->" .
		"\"" . $node->{location} . "/" . $callee . "\"" .
		" [label=" . $node->{deps}->{$callee} . " " .
		$propertyDrawer->($node, $callee, $levels, $root) .
		drawDependencyColor($node, $callee) .
		"];\n";
}

sub drawFunctionDependencies {
	my ($node, $levels, $root) = @_;
	return join("", map({
		drawDependency($node, \&drawEmpty, $_, $levels, $root);}
		keys %{$node->{deps}}));
}

sub drawDependencies {
	my ($node, $propertyDrawer, $levels, $root) = @_;
	return join("", map({
		drawDependency($node, $propertyDrawer, $_, $levels, $root);}
		keys %{$node->{deps}}));
}

sub drawFilteredDependencies {
	my ($node, $propertyDrawer, $filter, $levels, $root) = @_;
	return join("", map({
		$filter->($node, $_) ?
		drawDependency($node, $propertyDrawer, $_, $levels, $root) :
		"";}
		keys %{$node->{deps}}));
}

sub typeFilter {
	my ($node, $callee, $filter) = @_;
	return ($node->{parent}->{nodes}->{$callee}->{type} =~ /$filter/);
}

sub fileFilter {
	my ($node, $callee) = @_;
	typeFilter($node, $callee, "package");
}

sub packageFilter {
	my ($node, $callee) = @_;
	typeFilter($node, $callee, "file");
}

sub drawDependencyHead {
	my ($node, $callee) = @_;
	return "lhead=\"cluster_" . $node->{location} . "/" . $callee . "\"";
}

sub drawDependencyTail {
	my ($node, $callee) = @_;
	return "ltail=\"cluster_" . $node->{path} . "\"";
}

sub checkIterate {
	my ($node, $levels, $root) = @_;

	$node->{iterate} = (($node->{level} < $levels) ?
		(exists($node->{iterate}) ?
		$node->{iterate} :
		drawIterate($node, $levels, $root)) :
		"");
	return $node->{iterate} ne "";
}

sub drawDependenciesHeadTail {
	my ($node, $callee, $levels, $root) = @_;
	my $tail = checkIterate($node,
		$levels, $root);
	my $head = checkIterate($node->{parent}->{nodes}->{$callee},
		$levels, $root);
	my $dependencies = "";
	$dependencies .= $tail ? drawDependencyTail($node, $callee) : "";
	$dependencies .= ($tail and $head)? ", " : "";
	$dependencies .= $head ? drawDependencyHead($node, $callee) : "";
	return $dependencies;
}

sub drawCheckedDependencies {
	my ($node, $levels, $root) = @_;
	return drawDependencies($node,
		\&drawDependenciesHeadTail,
		$levels, $root);
}

sub drawCheckedNotPackagesDependencies {
	my ($node, $levels, $root) = @_;
	return drawFilteredDependencies($node,
		\&drawDependenciesHeadTail,
		\&packageFilter, $levels, $root);
}

sub drawCheckedNotFilesDependencies {
	my ($node, $levels, $root) = @_;
	return drawFilteredDependencies($node,
		\&drawDependenciesHeadTail,
		\&fileFilter, $levels, $root);
}

sub drawLeafPackageHeader {
	my ($package) = @_;
	return "\"" . $package->{path} . "\"" .
		" [" . drawReportColor($package) .
		", label=\"" . drawNameLabel($package) . "\\n" .
		drawReportLabel($package, "\\n") .
		"\", shape=tab, style=filled];\n";
}

sub drawLeafPackage {
	my ($package, $levels, $root) = @_;
	return drawLeafPackageHeader($package) .
		$package->{drawDependencies}($package, $levels, $root);
}

sub drawNodeHeader {
	my ($node, $levels, $root) = @_;
	return "subgraph \"cluster_" . $node->{path} . "\"" .
		" {\n" . drawReportColor($node) . ";label=\"" .
		drawNameLabel($node) .
		"\\n" . drawReportLabel($node, ", ") . "\";\n" .
		"\"" . $node->{path} . "\"" .
		" [style=invisible];\n" .
		$node->{iterate} . "}\n";
}

sub drawNode {
	my ($node, $levels, $root) = @_;
	return drawNodeHeader($node, $levels, $root) .
		$node->{drawDependencies}($node, $levels, $root)
}

sub drawPackage {
	my ($package, $levels, $root) = @_;
	return ((index($package->{location}, $root) ne 0) and
		(index($root, $package->{location}) ne 0)) ?
		drawEmpty() :
		((!checkIterate($package, $levels, $root)) ?
			drawLeafPackage($package, $levels, $root) :
			((index($package->{location}, $root) ne 0) ?
				$package->{iterate} :
				drawNode($package, $levels, $root)));
}

sub drawEmpty {
	return "";
}

sub drawIterate {
	my ($node, $levels, $root) = @_;
	return join("", map({draw($_, $levels, $root);}
		values %{$node->{nodes}}));
}

sub drawFunctionColor {
	my ($function) = @_;
	return ($function->{complexitySmells} > 0) ?
		"fontcolor=black, color=crimson" :
		"color=grey, fontcolor=black";
}

sub drawFunction {
	my ($function) = @_;
	return "\"" . $function->{path} . "\"" .
		" [style=filled, label=\"" . drawNameLabel($function) . "\\n" .
		drawComplexityLabel($function) . "\", " .
		drawFunctionColor($function) . "\];\n" .
		$function->{drawDependencies}($function);
}

sub drawLeafFileHeader {
	my ($file) = @_;
	return "\"" . $file->{path} . "\"" .
		" [" . drawReportColor($file) .
		", label=\"{" . drawNameLabel($file) . "|" .
		drawReportLabel($file, "\\n") .
		"|}\", shape=record, style=filled];\n";
}

sub drawLeafFile {
	my ($file, $levels, $root) = @_;
	return drawLeafFileHeader($file) .
		$file->{drawDependencies}($file, $levels, $root);
}

sub draw {
	my ($node, $levels, $root) = @_;
	return $node->{draw}($node, $levels, $root);
}

sub extractSmells {
	my ($node, $smells, $rootLength) = @_;
	my $name = (($rootLength > length($node->{location}) ? "" :
		substr($node->{location}, $rootLength))) . "/" .
		drawNameLabel($node);
	push (@{$smells}, initSmell($name, "Tangle",
		$node->{tangleSmells}));
	push (@{$smells}, initSmell($name, "Complexity",
		$node->{complexitySmells}));
	if (exists($node->{nodes})) {
		foreach my $node (values %{$node->{nodes}}) {
			extractSmells($node, $smells, $rootLength);
		}
	}
}

sub createSortedSmellsList {
	my ($node, $rootLength) = @_;
	my $smells = [];
	extractSmells($node, $smells, $rootLength);
	return [sort {$b->{value} <=> $a->{value}} @{$smells}];
}

sub createSmellText {
	my ($smell) = @_;
	return $smell->{value} > 0 ? $smell->{name} . ": " . $smell->{type} .
		" Smells:" . sprintf("%.0f", $smell->{value}) : "";
}

sub createSmellTopFiveText {
	my ($node, $rootLength) = @_;
	return join("\\n", map({createSmellText($_);}
		(values(@{createSortedSmellsList($node, $rootLength)}))[0..4]));
}

sub createSystemGraphReport {
	my ($node, $levels, $root) = @_;
	return "digraph system {\ncompound=true;\n" .
		"labelloc=t;\nlabel=\"Total Smells:" .
		sprintf("%.0f", $node->{totSmells}) . ", Quality:" .
		sprintf("%.0f", calculateQuality($node->{totSize},
		$node->{totSmells})) .
		"%\\n" . createSmellTopFiveText($node, length($root)) .
		"\";\n" . draw($node, $levels, $root) . "}\n";
}

sub createSmellListText {
	my ($node, $rootLength) = @_;
	return join("\n", map({createSmellText($_);}
		values(@{createSortedSmellsList($node, $rootLength)})));
}

sub createSystemTextReport {
	my ($node, $levels, $root) = @_;
	my $quality = calculateQuality($node->{totSize}, $node->{totSmells});
	return "Arqua Report:\n" .
		"----------------------------------------\n" .
		"Total Smells:" . sprintf("%.0f", $node->{totSmells}) . "\n" .
		"Quality:" .  sprintf("%.0f", $quality) . "%\n" .
		"----------------------------------------\n" .
		"Top Smells:\n" .
		"----------------------------------------\n" .
		createSmellListText($node, length($root));
}

sub main() {
	my $reportType = "graph";
	my $nodeTolerance = 35;
	my $functionTolerance = 5;
	my $functions = 0;
	my $files = 0;
	my $packages= 0;
	my $levels = 10000;
	my $root = "";
	my $package = initPackage("root", "", "");
	my $function = "";
	my $report = {
		graph => \&createSystemGraphReport,
		text => \&createSystemTextReport
	};

	GetOptions(
		"levels=i" => \$levels,
		"root=s" => \$root,
		"packages" => \$packages,
		"functions" => \$functions,
		"files" => \$files,
		"nt=i" => \$nodeTolerance,
		"ft=i" => \$functionTolerance,
		"report=s" => \$reportType);

	$root = "/root/" . $root;
	$levels += 1;

	$packageDrawer = $packages ? \&drawPackage : \&drawIterate;
	$fileDrawer = $files ?
		($functions ? \&drawNode : \&drawLeafFile) : \&drawIterate;
	$functionDrawer = $functions ? \&drawFunction : \&drawEmpty;
	$dependencyDrawer = $packages ?
		($files ?
			\&drawCheckedDependencies :
			\&drawCheckedNotFilesDependencies) :
		($files ?
			\&drawCheckedNotPackagesDependencies :
			\&drawEmpty);
	while (<>) {
		my $filePath = $ARGV;
		$function = parse($package, $filePath, $_, $function);
	}
	calculate($package, $functionTolerance, $nodeTolerance);
	print $report->{$reportType}($package, $levels, $root);
}

main();
